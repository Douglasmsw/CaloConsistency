import os
import matplotlib.pyplot as plot
import numpy as np
import argparse

'''
This is a comparison and evalutation script for multiple autoencoder models. It was built primarily to rank models by Frechet Physics Distances (generated by running CaloChalenge/code/evaluate.py).
Note that this script requires all and only autoencoder models which you wish to compare to be in the same folder (given in the model_eval_folder argument).
Each autoencoder model folder must also have the format "static_<layer_sizes>e<epoch>lr<learning_rate>" with layer size numbers separated by underscores, e.g. static_16_16_16_16_32e20lr0.004
This script can be used to compare any number of ae model evalutation results, but is primarily geared towards very large numbers of models.

Outputs:
- 6 plots of metrics vs. compression factor, 2 for FPD (Frechet Physics Distance), 2 for KPD (Kernel Physics Distance), 2 for AUC (Area Under Curve)
- model_eval_folder/model_comparison.txt, which holds all evalutation results for each model, with models sorted by FPD ascending (i.e. models closer to the top have better FPDs than those below).

Usage: hyper_compare_eval.py [-h] [--model_eval_folder MODEL_EVAL_FOLDER] [--plot_output_folder PLOT_OUTPUT_FOLDER]
optional arguments:
  -h, --help        show this help message and exit
  --model_eval_folder MODEL_EVAL_FOLDER
                    Folder containing CaloChalenge/code/evaluate.py results for all ae models
  --plot_output_folder PLOT_OUTPUT_FOLDER
                    Folder to put generated plots

'''

parser = argparse.ArgumentParser()    
parser.add_argument('--model_eval_folder', default='/net/projects/fermi-stimulations/eval_results/grey_hyper_plots', help='Folder containing CaloChalenge/code/evaluate.py output results for all ae models')
parser.add_argument('--plot_output_folder', default='../../../plots/hyper_plots', help='Folder to put generated plots')
flags = parser.parse_args()

original_dir = os.getcwd()
learning_rates = ['0.004', '0.0004', '0.00004']
epochs = list(range(20,420,20))

# Walk through model_eval_folder and find all autoencoder model evaluation directories we want to compare
os.chdir(flags.model_eval_folder)
all_dir_names = [x[0] for x in os.walk('.')][1:]
layers_set = set()
for dir in all_dir_names:
    for lr in learning_rates:
        layers, epochs_lrs = dir[9:].split('e')
        layers_set.add(layers+'lr'+lr)
print('layers found:',layers_set)

# This entire loop is just extracting evaluation data from each model's directory and storing it
info_list = []
for l in layers_set:
    ls,lr = l.split('lr')
    failed = False

    for e in epochs:
        filedir = 'static_'+ls+'e'+str(e)+'lr'+lr
        aucfilename = filedir+'/classifier_all_1-photons.txt'
        try:
            open(aucfilename,'r')
        except:
            failed = True
    if failed:
        continue

    layer_list = ls.split('_')
    compression = str(3 * 2 ** (3 * (len(layer_list) - 2)) / int(layer_list[-1]))

    for e in epochs:
        filedir = 'static_'+ls+'e'+str(e)+'lr'+lr
        aucfilename = filedir+'/classifier_all_1-photons.txt'

        with open(aucfilename,'r') as reader:
            auc = float(reader.readlines()[1].split()[0])
        fpdkpdfilename = filedir+'/fpd_kpd_1-photons.txt'
        with open(fpdkpdfilename,'r') as reader:
            fpd_kpd = reader.readlines()
            fpd = float(fpd_kpd[0].split()[2])
            kpd = float(fpd_kpd[1].split()[2])
            info_list.append((fpd,kpd,ls,e,lr,auc,compression))

# Switch to plot_output_folder in preparation for outputting stuff
os.chdir(original_dir)
# Make directories for output if currently nonexistent
os.makedirs(flags.plot_output_folder,exist_ok=True)
os.chdir(flags.plot_output_folder)

# Write the comparison strings for model_comparison.txt
info_list = np.array(info_list,dtype='float, float, S64, S64, S64, float, float')
sorted = np.sort(info_list,axis=0)
output_list = []
for i in sorted:
    output_list.append('For layer list '+str(i[2])[2:-1]+' with learning rate '+str(i[4])[2:-1]+' and '+str(i[3])[2:-1]+' epochs, FPD = '+str(i[0])+' KPD = '+str(i[1])+' AUC = '+str(i[5])+'\n')

# And output them to model_comparison.txt
output_file = open('model_comparison.txt', 'w')
output_file.writelines(output_list)
output_file.close()

# Change data format in preparation to plot
allcomp = [x[6] for x in sorted]
results = {'auc':[x[5] for x in sorted],'fpd':[x[0] for x in sorted],'kpd':[x[1] for x in sorted]}
epochs = [float(str(x[3])[2:-1]) for x in sorted]
plotnum = 0

# Plot <metric> vs compression factor for AUC, FPD, and KPD, and save the figures to plot_output_folder
for y_type in ['auc','fpd','kpd']:
    for log in [True,False]:
        plot.figure(plotnum,figsize=(6, 4))
        plotnum += 1
        plot.scatter(allcomp,results[y_type],c=epochs,cmap="plasma")
        plot.xlabel('Compression factor')
        plot.ylabel(y_type.upper())
        plot.colorbar(label='Epochs')
        plot.title(y_type.upper()+' vs Compression Factor')
        if log:
            plot.yscale('log')
            plot.savefig(y_type+'_vs_compression_logscale.png')
        else:
            plot.savefig(y_type+'_vs_compression.png')

#Notify user of successful execution
print("Results successfully output to",flags.plot_output_folder)


